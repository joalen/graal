name: Run JPF

on:
  push:

jobs:
  run-jpf:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: fefc2a03a1e46ce60ce4b03f223d83640fbef0f4
        path: graal
      
    - name: Download and install JVMCI-enabled JDK 8 (Linux)
      if: runner.os == 'Linux'
      run: |
        curl -L -o labsjdk-ce-21.0.2+13-jvmci-23.1-b33-linux-amd64.tar.gz https://github.com/graalvm/labs-openjdk-21/releases/download/jvmci-23.1-b33/labsjdk-ce-21.0.2+13-jvmci-23.1-b33-linux-amd64.tar.gz
        tar -xzf labsjdk-ce-21.0.2+13-jvmci-23.1-b33-linux-amd64.tar.gz
        mv labsjdk-ce-21.0.2-jvmci-23.1-b33 labsjdk-ce-21
        sudo mv labsjdk-ce-21 /usr/lib/jvm

    - name: Download and install JVMCI-enabled JDK 8 (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/graalvm/labs-openjdk-21/releases/download/jvmci-23.1-b33/labsjdk-ce-21.0.2+13-jvmci-23.1-b33-darwin-aarch64.tar.gz
        tar -xzf labsjdk-ce-21.0.2+13-jvmci-23.1-b33-darwin-aarch64.tar.gz
        mv labsjdk-ce-21.0.2-jvmci-23.1-b33 labsjdk-ce-21
        sudo mv labsjdk-ce-21 /Library/Java/JavaVirtualMachines/
            
    - name: Clone mx repositories
      run: |
        git clone https://github.com/graalvm/mx.git /tmp/mx
        cd /tmp/mx
        chmod +x mx

    - name: Build GraalVM (Linux)
      if: runner.os == 'Linux' 
      run: |
        export JAVA_HOME=/usr/lib/jvm/labsjdk-ce-21
        export PATH="$JAVA_HOME/bin:$PATH"
        cd graal/vm
        export PATH="/tmp/mx:$PATH" >> $GITHUB_ENV
        mx --env ce build
        
    - name: Build GraalVM (macOS)
      if: runner.os == 'macOS' 
      run: |
        export JAVA_HOME=/Library/Java/JavaVirtualMachines/labsjdk-ce-21/Contents/Home
        export PATH="$JAVA_HOME:$PATH"
        cd graal/vm
        export PATH="/tmp/mx:$PATH" >> $GITHUB_ENV
        mx --env ce build

    - name: Set up JDK 11 for JPF
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: maven
        
    - name: Clone and build jpf-core
      run: |
        git clone https://github.com/javapathfinder/jpf-core.git /tmp/jpf-core
        cd /tmp/jpf-core
        ./gradlew buildJars
  
    - name: Run JPF on JAR files
      shell: bash
      run: |
        #!/bin/bash
        set +e 

        mkdir jpf_reports
        directory=$(pwd)
        runjpf_jar="/tmp/jpf-core/build/RunJPF.jar"
        jar_files=$(find "$directory" -type f -name "*.jar")
        
        for jar_file in $jar_files; do
            if ! unzip -l "$jar_file" 2>/dev/null | grep -q "META-INF/MANIFEST.MF"; then
                continue
            fi
            
            main_class=$(unzip -p "$jar_file" META-INF/MANIFEST.MF | grep -i 'Main-Class' | awk -F': ' '{print $2}' | tr -d '\r')
            
            if [ -z "$main_class" ]; then
                continue
            fi
            
            command="java -jar $runjpf_jar +classpath=$jar_file $main_class" 
            $command > "./jpf_reports/${main_class}_jpf_report.txt"
        done

    - name: Upload JPF reports
      uses: actions/upload-artifact@v4
      with:
        name: jpf-report-${{ github.event.repository.name}}-on-${{ matrix.os }}-from_branch_${{ github.ref_name }}
        path: './jpf_reports/*'
